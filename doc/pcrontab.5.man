NAME
pcrontab - the file format used by the files in ~/.pcron.

CRONTAB FILE
A user's crontab is placed at `~/.pcron/crontab.ini'. It must be edited using
the pcrontab(1) command. After editing the pcrontab(1) command sends a SIGHUP
to the pcron(1) process to notify it of the changes.

The crontab file follows the INI file format. Empty lines or lines starting
with a `#' or a `;' will be ignored. It is possible to have continuation lines
by indenting.


JOB DEFINITIONS
The crontab file consists of one or more job definitions. A job definition
begins with the job name between two brackets `[...]'. There is one special
name `[default]' that contains default values for all job definitions. A job
definition is a list of key value pairs one per line, both key and value
separated by either a `:' or a `='.

The job definition provides a basic inheritance mechanism. It is possible to
build job hierarchies using names with `.` characters in them, e.g. the job
`foo.bar` inherits all key value pairs from the job `foo`.

The properties of jobs can be defined using the following key value pairs:

command: <shell_command>  
  The shell command to execute. The shell that is used to execute the command
  is the user's default shell as specified in `/etc/passwd'.

active: <true/yes/1>|<false/no/0>  
  Execute this job only if set to `true' (which is the default). This can be
  used to temporarily suspend a job from being executed.

time: <minute> <hour> <day of month> <month> <day of week>  
  Define points in time when the job will be scheduled. The format is the same
  as in a traditional cron implementation. All five fields are mandatory.
  Possible values are:
    - <minutes>: 0-59
    - <hours>: 0-23
    - <day of month>: 1-31
    - <month>: 1-12 or e.g. jan,feb,mar,apr,...,nov,dec
    - <day of week>: 0-7 (0 and 7 being sunday) or sun,mon,tue,wed,thu,fri,sat

    A field contains either a single value, a range, a comma-separated list of
    values or ranges or a `*' character which stands for every possible value.
    A single value is either a number or in case of <month> and <day of week> a
    three-letter abbreviation of a name. A range consists of `<first>-<last>'
    including <first> and <last>. Ranges as well as the `*' character can have
    a step value appended in the form of `*/<step>' which means every <step>'th
    value, e.g. `1-12/3' which resolves to `1,4,7,10'. It is also possible to
    substract single values from ranges, e.g. `1-4~2~3' which resolves to
    `1,4'.

interval: <value>  
  Define how often the job will be scheduled. Valid multipliers are `m' for
  month (4 weeks), `w' for week, `d' for day, `h' for hour and none for
  minutes, e.g. `1d12h30' meaning an interval of one day, twelve hours and
  thirty minutes.

post: <job-id> [<job-id> ...]  
  Schedule the job as a follow-up to one or more other jobs. The job will be
  scheduled as soon as the other jobs have ended.

condition: <shell_command>  
  Make the actual execution of the job conditional on the exit status of a shell
  command which is evaluated right before the job is about to start.  Please
  note, that the shell command is executed synchronously and blocks the entire
  pcron(1) process until it returns, which is why you should keep its running
  time to a few seconds at most.

queue: <name>  
  Add the job to the queue with this name. Jobs in the same queue will be
  scheduled one after the other being delayed if necessary. By default, every
  job runs in its own queue. See SCHEDULING AND QUEUES for more information.

conflict: skip|mail|kill  
  Define which action to take when there is a scheduling conflict, i.e. a job
  is about to be scheduled while another instance of the same job is still
  running or waiting. The default action is `mail'.
    - skip: do not schedule new instances as long as another instance is
      running or waiting
    - mail: the same as skip, but send a warning mail everytime a new instance
      is discarded
    - kill: terminate the running or waiting instance and schedule the new one,
      send a warning mail, see SCHEDULING AND QUEUES for more information.

  In any case, a warning for each conflict is written to the logfile.

locale: <language.codeset>  
  Define the language and codeset for the shell command. `codeset' is used as
  the character encoding for sending mail. The default is `en_US.UTF-8'.

mail: never|always|error|output  
  When to send the output of the job via mail, either `never', `always', if
  an `error' occurred or if the job actually produced `output'.

mailto: <email_address>  
  Send the job output to this email address. It defaults to the user's name.

sendmail: /usr/sbin/sendmail  
  The path to the sendmail(1) command.

loglevel: quiet|info|debug
  Control the level of log messages from the pcron(1) process. `quiet' logs
  errors and warnings only, `info' logs basic job scheduling information and
  `debug' logs every detail of information.


SCHEDULING AND QUEUES
The scheduling directives `time`, `interval` and `post` may be freely mixed.
`time` and `post` work as expected, whereas the schedule of `interval` will
always be relative to the previous run.

The purpose of queues is to reduce system load by grouping similar jobs
together and running one after the other instead of all at once.  However,
queues tend to complicate job scheduling:

  - Although, in principle, jobs are still scheduled at the correct time, they
    may be delayed for as long as there are other jobs before them in the same
    queue.
  - Jobs in queues may run less frequently than intended because they may be
    blocked by other potentially long running jobs. pcron(1) will discard jobs
    to prevent them from piling up.
  - It may not be advisable to use the `kill` conflict handler because if a new
    instance terminates a running instance of the same job, it will not be
    started right away but be placed at the end of the queue. The next job that
    is in the queue will be started.


ENVIRONMENT FILE
The environment is located at `~/.pcron/environment.sh' and is optional. Its
purpose is to define shell variables or to specify setup code. This code is
executed for every job that is started.


DEFAULT VARIABLES
There are some predefined environment variables available for use in the
crontab file.

USER, LOGNAME  The alphanumeric name of the user who owns the current crontab file.

UID  The numeric id of the user.

GID  The numeric group id of the user.

HOME  The home directory of the user as found in the `/etc/passwd' database.

SHELL  The path to the shell of the user as found in the `/etc/passwd' database.

PATH  Defaults to `/usr/local/bin:/usr/bin:/bin'. For the root user the PATH also contains the `/usr/local/sbin:/usr/sbin:/sbin' variants.

PCRONDIR  The configuration directory of the current pcron(1) instance, usually `~/.pcron'.

JOB_ID  The name of the current job.

JOB_QUEUE  The queue the job is part of.


EXAMPLE

Here is an example for an environment.sh file:

  # ~/.pcron/environment.sh

  BACKUPDIR=$HOME/backupdir
  MIRROR=remote_host:/backup
  DATE=$(date +%Y%m%d)

And an example for a crontab file:

  # ~/.pcron/crontab.ini example file

  [default]
  mail:       error

  [tar]
  command:    tar -c -v -z -f $BACKUPDIR/$DATE.tar.gz -C $HOME .
  interval:   1d
  queue:      backup

  [db]
  command:    pg_dumpall > $BACKUPDIR/db-$DATE.sql
  time:       0 0,12 * * *
  queue:      backup

  [sync]
  command:    rsync -a $BACKUPDIR $MIRROR
  post:       tar
  queue:      backup
  mail:       always


FILES
  ~/.pcron/crontab.ini
  ~/.pcron/environment.sh

SEE ALSO
  pcrond(1), pcron(1), pcrontab(1)

AUTHOR
  Lars Gustaebel <lars@gustaebel.de>

