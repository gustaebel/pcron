#!/usr/bin/python3
# -----------------------------------------------------------------------
#
# pcron - a periodic cron-like job scheduler.
# Copyright (C) 2009-2016 Lars Gust√§bel <lars@gustaebel.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# -----------------------------------------------------------------------

import sys
import os
import argparse
import hashlib
import tempfile
import subprocess
import shutil
import signal

from libpcron import __version__, __copyright__, ENVIRONMENT_NAME, CRONTAB_NAME, PID_NAME
from libpcron.parser import CrontabParser, CrontabError, CrontabEmptyError
from libpcron.run import SHELL_CODE
from libpcron.job import Job


def digest(path):
    with open(path, "rb") as fileobj:
        return hashlib.sha1(fileobj.read()).digest()


def list_file(args, name):
    path = os.path.join(args.directory, name)
    if not os.path.exists(path):
        raise SystemExit("not found: %s" % path)

    with open(path) as fobj:
        sys.stdout.write(fobj.read())


def edit_file(args, name):
    path = os.path.join(args.directory, name)

    _, tmppath = tempfile.mkstemp(dir=args.directory, prefix=name, suffix=os.path.splitext(name)[1])
    os.close(_)

    try:
        with open(tmppath, "w") as tmp:
            if args.action.startswith("edit"):
                if os.path.exists(path):
                    with open(path, "r") as fileobj:
                        tmp.write(fileobj.read())
            else:
                # -i/--import, -I/--import-environment
                tmp.write(sys.stdin.read())

        while True:
            if args.action.startswith("edit") and subprocess.call([args.editor, tmppath]) != 0:
                print("an error occurred, discarding ...")
                break

            elif os.path.exists(path) and digest(tmppath) == digest(path):
                print("new %s is unchanged, discarding ..." % name)
                break

            else:
                if name == CRONTAB_NAME:
                    try:
                        parser = CrontabParser(tmppath, Job)
                        parser.parse()

                    except CrontabEmptyError:
                        pass

                    except CrontabError as exc:
                        print("error: %s" % exc)
                        if args.action.startswith("edit"):
                            try:
                                input("Press a key to edit the file again (Ctrl-C to exit) ...")
                            except KeyboardInterrupt:
                                print()
                                return
                            continue
                        else:
                            return

                if not args.no_backup:
                    if os.path.exists(path):
                        shutil.copy(path, path + "~")
                os.rename(tmppath, path)

                print("installed new", name)

                try:
                    with open(os.path.join(args.directory, PID_NAME)) as fileobj:
                        pid = int(fileobj.read().strip())
                except (OSError, ValueError):
                    raise SystemExit("pid file not found")
                else:
                    try:
                        os.kill(pid, signal.SIGHUP)
                    except ProcessLookupError:
                        raise SystemExit("no such pid %d" % pid)
                break

    finally:
        if os.path.exists(tmppath):
            os.remove(tmppath)


def execute(args):
    name = args.execute

    parser = CrontabParser(os.path.join(args.directory, CRONTAB_NAME), Job)
    try:
        startup, crontab = parser.parse()
    except CrontabEmptyError:
        raise SystemExit("crontab is empty")

    job = crontab.get(name, startup.get(name))
    if job is None:
        raise SystemExit("no such job %r" % name)

    if job.active:
        print("WARNING: job %r is not marked as inactive!" % name, file=sys.stderr)

    try:
        with open(os.path.join(args.directory, ENVIRONMENT_NAME)) as fobj:
            init_code = fobj.read()
    except EnvironmentError:
        init_code = ""

    environ = Job.create_environ(args.directory, name, name + "-0", job.group)

    with tempfile.NamedTemporaryFile(prefix="tmp.pcron-cmd.", mode="w") as script:
        script.write(SHELL_CODE % (init_code, job.command))
        script.flush()

        try:
            proc = subprocess.Popen([environ["SHELL"], script.name], env=environ)
            sys.exit(proc.wait())
        except KeyboardInterrupt:
            pass


def main():
    parser = argparse.ArgumentParser(usage="%(prog)s [-l|-e] [<options>]")
    parser.add_argument("--version", action="version",
                        version="%%(prog)s %s - %s" % (__version__, __copyright__))
    parser.add_argument("-l", "--list", action="store_const", const="list", dest="action",
                        help="list the crontab")
    parser.add_argument("-L", "--list-environment", action="store_const", const="list_environment",
                        dest="action", help="list the environment")
    parser.add_argument("-e", "--edit", action="store_const", const="edit", dest="action",
                        help="edit the  crontab")
    parser.add_argument("-E", "--edit-environment", action="store_const", const="edit_environment",
                        dest="action", help="edit the environment")
    parser.add_argument("-i", "--import", action="store_const", const="import", dest="action",
                        help="import the crontab from stdin")
    parser.add_argument("-I", "--import-environment", action="store_const",
                        const="import_environment", dest="action",
                        help="import the environment from stdin")
    parser.add_argument("-x", "--execute", action="store", default=None,
                        help="execute a job from the crontab in the current shell")
    parser.add_argument("-d", "--directory", metavar="NAME", default="~/.pcron",
                        help="the name of the configuration directory, default is %(default)s")
    parser.add_argument("--editor", metavar="PATH", default=os.environ.get("EDITOR", "undefined"),
                        help="PATH to text editor, default is %(default)s")
    parser.add_argument("--no-backup", action="store_true", default=False,
                        help="do not make backups")
    args = parser.parse_args()

    args.directory = os.path.expanduser(args.directory)

    if args.action is None and args.execute is None:
        parser.error("please specify an action")

    if args.action == "edit" and args.editor == "undefined":
        parser.error("$EDITOR is undefined, please supply the --editor option")

    if not os.path.exists(args.directory):
        os.makedirs(args.directory)

    if args.execute is not None:
        execute(args)

    else:
        if args.action.startswith("list"):
            func = list_file
        else:
            func = edit_file

        if args.action.endswith("_environment"):
            name = ENVIRONMENT_NAME
        else:
            name = CRONTAB_NAME

        func(args, name)


if __name__ == "__main__":
    main()
